function staticGestureRecognitionUI()
    % === Aggiunta al path per accedere al classificatore ===
    initPaths();

    % === Finestra principale ===
    fig = uifigure('Name', 'Problema 1 ‚Äì Gesti Statici', ...
                   'Position', [300 150 1200 700], ...
                   'Color', [0.96, 0.96, 0.96]);

    % === Pulsante torna indietro ===
    uibutton(fig, 'Text', '‚óÄ Torna alla schermata principale', ...
        'FontSize', 12, 'FontName', 'Segoe UI', ...
        'Position', [10 660 230 30], ...
        'ButtonPushedFcn', @(~,~) backToMain(fig));

    % === Contenitore preview immagine ===
    previewPanel = uipanel(fig, 'Title', 'Anteprima immagine', ...
        'FontName', 'Segoe UI', 'FontSize', 12, ...
        'Position', [20 300 400 350], 'BackgroundColor', [1 1 1]);

    axPreview = uiaxes(previewPanel, 'Position', [10 60 380 270]);
    axis(axPreview, 'off');
    axPreview.Toolbar.Visible = 'off';
    axPreview.XTick = [];
    axPreview.YTick = [];
    box(axPreview, 'off');
    setappdata(fig, 'PreviewAxes', axPreview);

    % === Info immagine sotto la preview ===
    uilabel(previewPanel, 'Position', [10 20 380 20], 'Tag', 'ImgInfoLabel', ...
             'FontName', 'Segoe UI', 'HorizontalAlignment', 'left');

    % === Tabella dei file caricati ===
    fileTable = uitable(fig, 'Position', [20 70 800 190], ...
        'ColumnName', {'Nome', 'Data', 'Tipo', 'Dimensione (KB)', 'Tag'}, ...
        'ColumnWidth', {250, 150, 100, 150, 150}, 'RowName', [], 'Tag', 'HistoryTable', ...
        'ColumnSortable', true, 'CellSelectionCallback', @(tbl,event) onHistorySelect(fig, event));
    setappdata(fig, 'FileTable', fileTable);
    setappdata(fig, 'ImageHistoryData', {});
    setappdata(fig, 'CurrentImagePath', '');

    % === Sezione Aiuto a destra ===
    helpPanel = uipanel(fig, 'Title', 'Aiuto e guida', 'FontName', 'Segoe UI', 'FontSize', 12, ...
        'Position', [840 70 340 270]);
    uitextarea(helpPanel, 'Position', [10 10 320 220], 'Value', {
        'üìÇ Carica immagine: seleziona uno o pi√π file immagine da analizzare.'...
        '‚úç Inserisci vettore: carica un file di feature manualmente.'...
        '‚ñ∂ Classifica immagine: applica il classificatore alla selezione corrente.'...
        'üìë Classifica tutto: classifica tutte le immagini caricate e salva su CSV.'...
        'üßπ Pulisci cronologia: resetta tutti i file caricati.'...
        'üñºÔ∏è Anteprima: mostra l''immagine selezionata.'...
        'üìã Cronologia: elenco dei file caricati.'...
        'üß† Feature: vettore estratto o caricato.'...
        '‚úÖ Risultato: output del classificatore.'
    }, 'Editable', 'off');

    % === Feature Vector ===
    featurePanel = uipanel(fig, 'Title', 'Feature estratte', 'Position', [440 380 350 270]);
    uitable(featurePanel, 'Position', [10 10 330 230], ...
            'ColumnName', {'Feature'}, 'RowName', [], ...
            'Tag', 'FeatureTable');

    % === Risultato classificazione ===
    resultPanel = uipanel(fig, 'Title', 'Risultato', 'Position', [820 380 360 270]);
    uilabel(resultPanel, 'Text', 'Risultato: ‚Äì', 'Tag', 'ResultLabel', ...
        'Position', [10 200 330 30], 'FontSize', 18, 'FontWeight', 'bold');
    uitextarea(resultPanel, 'Position', [10 20 330 170], 'Editable', 'off', 'Tag', 'LogBox');
    
    % === Pulsante clear log ===
    uibutton(resultPanel, 'Text', 'üßπ Pulisci cronologia', ...
        'Position', [190 200 150 30], 'FontSize', 11, ...
        'ButtonPushedFcn', @(btn,~) clearHistory(fig));

    % === Pulsanti ===
    uibutton(fig, 'Text', 'üìÇ Carica immagine', 'Position', [440 330 160 35], ...
             'ButtonPushedFcn', @(btn,~) loadMultipleImages(fig));
    uibutton(fig, 'Text', '‚úç Inserisci vettore', 'Position', [610 330 160 35], ...
             'ButtonPushedFcn', @(btn,~) loadFeatureVector(fig));
    uibutton(fig, 'Text', '‚ñ∂ Classifica immagine', 'Position', [440 285 160 35], ...
             'ButtonPushedFcn', @(btn,~) classifyCurrentImage(fig));
    uibutton(fig, 'Text', 'üìë Classifica tutto', 'Position', [610 285 160 35], ...
             'ButtonPushedFcn', @(btn,~) classifyAllImages(fig));

    addFooter(fig);
end

function loadMultipleImages(fig)
    [files, path] = uigetfile({'*.png;*.jpg;*.bmp','Immagini'}, 'Seleziona immagini', 'MultiSelect', 'on');
    if isequal(files, 0), return; end

    if ischar(files), files = {files}; end

    ax = getappdata(fig, 'PreviewAxes');
    lbl = findobj(fig, 'Tag', 'ImgInfoLabel');
    history = getappdata(fig, 'ImageHistoryData');
    table = findobj(fig, 'Tag', 'HistoryTable');
    data = table.Data;

    % Preallocazione (opzionale: migliora performance su grandi quantit√†)
    newHistory = cell(1, length(files));
    newData = cell(length(files), 5);
    nAdded = 0;

    for i = 1:length(files)
        file = files{i};
        imgPath = fullfile(path, file);
        [~, onlyName, ext] = fileparts(file);

        if ~any(strcmp(history, imgPath))
            nAdded = nAdded + 1;
            newHistory{nAdded} = imgPath;
            
            newData(nAdded,:) = {[onlyName ext], char(datetime('now'), 'dd-MM-yyyy HH:mm'), ...
                                 getFileType(file), sprintf('%.1f', getFileSize(imgPath)), ''};
        end
    end

    % Rimuove celle vuote non utilizzate
    newHistory = newHistory(1:nAdded);
    newData = newData(1:nAdded, :);

    % Aggiorna GUI
    history = [history, newHistory];
    data = [data; newData];
    set(table, 'Data', data);
    setappdata(fig, 'ImageHistoryData', history);

    imgPath = newHistory{1};
    setappdata(fig, 'CurrentImage', imread(imgPath));
    setappdata(fig, 'CurrentImagePath', imgPath);

    imshow(imread(imgPath), 'Parent', ax);
    lbl.Text = sprintf('%s | %s | %.1f KB', files{1}, getFileType(files{1}), getFileSize(imgPath));
    logMessage(fig, sprintf('Caricate %d immagini.', nAdded));
end

function onHistorySelect(fig, event)
    if isempty(event.Indices), return; end
    row = event.Indices(1);
    data = get(findobj(fig, 'Tag', 'HistoryTable'), 'Data');
    filename = data{row, 1};
    history = getappdata(fig, 'ImageHistoryData');
    for i = 1:length(history)
        [~, name, ext] = fileparts(history{i});
        if strcmp([name ext], filename)
            img = imread(history{i});
            ax = getappdata(fig, 'PreviewAxes');
            imshow(img, 'Parent', ax);
            setappdata(fig, 'CurrentImage', img);
            setappdata(fig, 'CurrentImagePath', history{i});
            lbl = findobj(fig, 'Tag', 'ImgInfoLabel');
            lbl.Text = sprintf('%s | %s | %.1f KB', filename, upper(getFileType(filename)), getFileSize(history{i}));
            logMessage(fig, ['Ricaricata immagine da cronologia: ' filename]);
            return;
        end
    end
end

function clearHistory(fig)
    set(findobj(fig, 'Tag', 'ImgInfoLabel'), 'Text', '');
    set(findobj(fig, 'Tag', 'ResultLabel'), 'Text', 'Risultato: ‚Äì');
    set(findobj(fig, 'Tag', 'FeatureTable'), 'Data', {});
    set(findobj(fig, 'Tag', 'LogBox'), 'Value', {''});
    cla(getappdata(fig, 'PreviewAxes'));
    logMessage(fig, 'Feature e risultato azzerati.');
end

function classifyCurrentImage(fig)
    currentPath = getappdata(fig, 'CurrentImagePath');
    if isempty(currentPath) || ~isfile(currentPath)
        uialert(fig, 'Caricare prima un''immagine.', 'Errore'); return;
    end

    gesture = classifyGestureFromImage(currentPath);
    [c, pr, feat] = extractFeatures(currentPath);

    % Mostra vettore delle feature
    tbl = findobj(fig, 'Tag', 'FeatureTable');
    tbl.Data = [c; pr; feat];

    lbl = findobj(fig, 'Tag', 'ResultLabel');
    lbl.Text = ['Risultato: ', char(gesture)];
    logMessage(fig, ['Classificazione da immagine: ', char(gesture)]);
end

function classifyAllImages(fig)
    history = getappdata(fig, 'ImageHistoryData');
    if isempty(history)
        uialert(fig, 'Nessuna immagine caricata.', 'Errore');
        return;
    end

    n = length(history);
    log = cell(1, n);

    % === Path robusto per finire in Modules/Problem1 ===
    uiDir    = fileparts(mfilename('fullpath'));           % .../Main/ModulesUI/Problem1_UI
    mainDir  = fileparts(fileparts(uiDir));                % .../Main
    projRoot = fileparts(mainDir);                         % ... (root del progetto)
    outDir   = fullfile(projRoot, 'Modules', 'Problem1');  % .../Modules/Problem1

    if ~exist(outDir, 'dir'), mkdir(outDir); end

    % === Costruzione file ===
    timestamp = char(datetime('now', 'Format', 'yyyyMMdd_HHmmss'));
    outFile = fullfile(outDir, ['classificazioni_' timestamp '.csv']);
    fid = fopen(outFile, 'w', 'n', 'UTF-8');
    fprintf(fid, 'Nome file,Compattezza,ProtrusionRatio,AltreFeature,Esito,Data\n');

    for i = 1:n
        imgPath = history{i};
        [~, name, ext] = fileparts(imgPath);
        filename = [name ext];

        gesture = classifyGestureFromImage(imgPath);
        [c, pr, feat] = extractFeatures(imgPath);

        fprintf(fid, '"%s",%.4f,%.4f,%.4f,"%s","%s"\n', ...
            filename, c, pr, feat, gesture, ...
            char(datetime('now'), 'dd-MM-yyyy HH:mm'));

        log{i} = sprintf('%s ‚Üí %s', filename, gesture);
    end

    fclose(fid);
    logMessage(fig, sprintf('Classificazione batch completata. File CSV: %s', outFile));
    for i = 1:n
        logMessage(fig, log{i});
    end
end

function type = getFileType(filename)
    [~, ~, ext] = fileparts(filename);
    type = upper(strrep(ext, '.', ''));
end

function kb = getFileSize(filepath)
    info = dir(filepath);
    kb = info.bytes / 1024;
end

function logMessage(fig, msg)
    logBox = findobj(fig, 'Tag', 'LogBox');
    timestamp = char(datetime('now', 'Format', 'HH:mm:ss'));
    logBox.Value = [{[timestamp ' ‚Äì ' msg]}; logBox.Value];
end

function loadFeatureVector(fig)
    % Chiedi all‚Äôutente cosa vuole fare
    choice = uiconfirm(fig, ...
        'Come vuoi inserire il feature vector?', ...
        'Input feature', ...
        'Options', {'Carica da file .mat', 'Inserisci manualmente', 'Annulla'}, ...
        'DefaultOption', 1, ...
        'CancelOption', 3);

    if strcmp(choice, 'Annulla')
        return;
    end

    % === MODALIT√Ä 1: da file .mat ===
    if strcmp(choice, 'Carica da file .mat')
        try
            [file, path] = uigetfile('*.mat', 'Seleziona file .mat con vettore fv');
            if isequal(file, 0), return; end
            fullpath = fullfile(path, file);
            S = load(fullpath);
            
            % Cerca il primo campo numerico vettoriale
            fn = fieldnames(S);
            fv = [];
            for i = 1:length(fn)
                val = S.(fn{i});
                if isnumeric(val) && isvector(val)
                    fv = val(:);  % forza colonna
                    break;
                end
            end
    
            if isempty(fv)
                uialert(fig, 'Il file non contiene alcun vettore numerico.', 'Errore');
                return;
            end
        catch ME
            uialert(fig, ['Errore durante il caricamento: ' ME.message], 'Errore');
            return;
        end 
    else
        % === MODALIT√Ä 2: input manuale ===
        answer = inputdlg('Inserisci il feature vector [es: 0.12 1.04 0]:', ...
                          'Input manuale', 1, {''});
        if isempty(answer), return; end
        fv = str2num(answer{1}); %#ok<ST2NM>
        if isempty(fv) || ~isnumeric(fv)
            uialert(fig, 'Input non valido.', 'Errore');
            return;
        end
    end

    % === Classificazione vera ===
    gesture = classifyGestureFromVector(fv(:));

    % Aggiorna tabella feature
    tbl = findobj(fig, 'Tag', 'FeatureTable');
    tbl.Data = fv(:);

    % Mostra risultato
    lbl = findobj(fig, 'Tag', 'ResultLabel');
    lbl.Text = ['Risultato: ', char(gesture)];

    logMessage(fig, ['Feature vector classificato ‚Üí ', char(gesture)]);
end

function backToMain(currentFig)
    delete(currentFig);
    createApp();
end

function addFooter(parent)
    % Footer text
    uilabel(parent, ...
        'Text', sprintf(['\n¬© 2025 Yurii Riina, Nicol√≤ Gioacchini, Thomas Marinucci ‚Äî Tutti i diritti riservati.\n', ...
                         'Questo software √® protetto da copyright.'] ), ...
        'FontSize', 10, ...
        'FontName', 'Segoe UI', ...
        'HorizontalAlignment', 'center', ...
        'Position', [100, 10, 700, 35], ...
        'FontColor', [0.5 0.5 0.5], ...
        'BackgroundColor', [0.96 0.96 0.96]); % Uniforma lo sfondo

    % Logo posizionato in basso a sinistra, proporzionato
    uiimage(parent, ...
        'ImageSource', 'logo_UNIVPM.png', ...
        'Position', [110 10 80 40], ...
        'ScaleMethod', 'fit');  % Adatta senza deformare
end