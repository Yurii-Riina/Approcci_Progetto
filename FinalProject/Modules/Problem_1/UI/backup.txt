% buildStaticGestureUI.m
% Questo file costruisce interamente la UI per il modulo "Gesti Statici",
% utilizzando una struttura a tab verticali. Nessuna logica √® collegata.
% Ogni tab √® separato e predisposto per futura integrazione funzionale.

function staticGestureRecognitionUI()
    fig = uifigure('Name', 'Problema 1 ‚Äì Gesti Statici', ...
                   'Position', [300 150 1200 700], ...
                   'Color', [0.96, 0.96, 0.96]);

    % === Pulsante torna indietro ===
    uibutton(fig, 'Text', '‚óÄ Torna alla schermata principale', ...
        'FontSize', 12, 'FontName', 'Segoe UI', ...
        'Position', [10 660 230 30], ...
        'ButtonPushedFcn', @(~,~) backToMain(fig));

    % === TabGroup verticale ridotto per non invadere il footer ===
    tg = uitabgroup(fig, 'Position', [10 60 1180 570]);

    %% === TAB 1 ‚Äì Info Modulo ===
    tabInfo = uitab(tg, 'Title', 'üóû Info modulo');
    uilabel(tabInfo, 'Text', 'Modulo 1 ‚Äì Riconoscimento gesti statici', ...
             'FontSize', 18, 'FontWeight', 'bold', 'Position', [20 510 800 30]);
    uitextarea(tabInfo, 'Position', [20 230 1140 270], 'Editable', 'off', ...
               'Value', {'Descrizione dettagliata del modulo, obiettivi, approccio usato, ecc.'});

    %% === TAB 2 ‚Äì Classifica Immagine ===
    tabClassify = uitab(tg, 'Title', 'üß† Classifica immagine');

    previewPanel = uipanel(tabClassify, 'Title', 'Anteprima immagine', ...
        'FontName', 'Segoe UI', 'FontSize', 12, 'Position', [20 290 380 240], 'BackgroundColor', [1 1 1]);
    axPreview = uiaxes(previewPanel, 'Position', [10 60 360 170]);
    axis(axPreview, 'off'); axPreview.Toolbar.Visible = 'off'; box(axPreview, 'off');
    setappdata(fig, 'PreviewAxes', axPreview);
    uilabel(previewPanel, 'Position', [10 20 360 20], 'Tag', 'ImgInfoLabel', 'FontName', 'Segoe UI');

    resultPanel = uipanel(tabClassify, 'Title', 'Risultato', 'Position', [410 290 370 240]);
    uilabel(resultPanel, 'Text', 'Risultato: ‚Äì', 'Tag', 'ResultLabel', ...
        'Position', [10 190 350 30], 'FontSize', 18, 'FontWeight', 'bold');
    uitextarea(resultPanel, 'Position', [10 60 350 130], 'Editable', 'off', 'Tag', 'LogBox');

    uibutton(tabClassify, 'Text', 'üìÇ Carica immagine', ...
        'Position', [800 450 370 40], ...
        'FontSize', 14, 'ButtonPushedFcn', @(~,~) disp('TODO: carica immagine'));

    uibutton(tabClassify, 'Text', '‚ñ∂ Classifica immagine', ...
        'Position', [800 390 370 40], ...
        'FontSize', 14, 'ButtonPushedFcn', @(~,~) disp('TODO: classifica immagine'));

    uibutton(tabClassify, 'Text', 'üìÅ Classifica tutto', ...
        'Position', [800 330 370 40], ...
        'FontSize', 14, 'ButtonPushedFcn', @(~,~) disp('TODO: classifica tutto'));

    featurePanel = uipanel(tabClassify, 'Title', 'Feature estratte', 'Position', [20 20 560 250]);
    uitable(featurePanel, 'Position', [10 10 540 210], 'ColumnName', {'Valore'}, 'RowName', {}, 'Tag', 'FeatureTable');
    %uitable(featurePanel, 'Position', [10 10 540 210], 'ColumnName', {'Feature'}, 'RowName', [], 'Tag', 'FeatureTable');

    fileTablePanel = uipanel(tabClassify, 'Title', 'File analizzati', 'Position', [600 20 560 250]);
    uitable(fileTablePanel, 'Position', [10 10 540 210], 'ColumnName', {'Nome', 'Data', 'Tipo', 'Dim (KB)', 'Tag'}, ...
        'ColumnWidth', {130, 90, 80, 110, 130}, 'RowName', [], 'Tag', 'HistoryTablePartial');

    %% === TAB 3 ‚Äì Vettori di Feature ===
    tabVector = uitab(tg, 'Title', 'üß© Vettori di feature');
    uibutton(tabVector, 'Text', '‚úç Inserisci manuale', 'Position', [20 490 260 40], ...
        'ButtonPushedFcn', @(~,~) disp('TODO: input manuale'));
    uibutton(tabVector, 'Text', 'üìÅ Carica .mat', 'Position', [300 490 260 40], ...
        'ButtonPushedFcn', @(~,~) disp('TODO: carica .mat'));
    uibutton(tabVector, 'Text', 'üìÅ Classifica vettori', 'Position', [580 490 260 40], ...
        'ButtonPushedFcn', @(~,~) disp('TODO: classifica vettori'));

    tblVector = uitable(tabVector, 'Position', [20 240 1140 240], 'ColumnName', {'Feature'}, 'RowName', [], 'Tag', 'FeatureTableVector');
    lblVector = uilabel(tabVector, 'Text', 'Risultato: ‚Äì', 'Tag', 'ResultLabelVector', ...
        'Position', [20 200 800 30], 'FontSize', 18, 'FontWeight', 'bold');

    setappdata(fig,'FeatureTableVector', tblVector);
    setappdata(fig,'ResultLabelVector',  lblVector);

    %% === TAB 4 ‚Äì Cronologia (solo tabella e log) ===
    tabSession = uitab(tg, 'Title', 'üóÉÔ∏è Sessione');

    % Cronologia file completi
    uitable(tabSession, 'Position', [20 320 750 210], 'ColumnName', ...
        {'Nome', 'Data', 'Tipo', 'Dim (KB)', 'Tag', 'Classe'}, ...
        'ColumnWidth', {220, 110, 100, 100, 110, 110}, 'RowName', [], 'Tag', 'HistoryTableFull');

    % Stato operazioni (salvataggi / caricamenti)
    statusPanel = uipanel(tabSession, 'Title', 'Stato operazioni', ...
        'Position', [840 320 320 210], ...
        'FontName', 'Segoe UI', 'FontSize', 12, ...
        'BackgroundColor', [1 1 1]);
    
    uilabel(statusPanel, ...
        'Text', sprintf('- Ultima operazione: Nessuna\n- Stato sessione: Inattiva\n- Ultimo export: --'), ...
        'Position', [10 20 250 170], 'FontName', 'Segoe UI', ...
        'FontSize', 13, 'Tag', 'SessionStatusLabel', ...
        'HorizontalAlignment', 'left', 'WordWrap', 'on');

    % Pulsanti gestione sessione (sotto il pannello stato)
    uibutton(tabSession, 'Text', 'üìÅ Carica sessione', 'Position', [20 250 260 40], ...
        'FontSize', 14, 'ButtonPushedFcn', @(~,~) disp('TODO: carica sessione'));
    uibutton(tabSession, 'Text', 'üíæ Salva sessione', 'Position', [315 250 260 40], ...
        'FontSize', 14, 'ButtonPushedFcn', @(~,~) disp('TODO: salva sessione'));
    uibutton(tabSession, 'Text', 'üì§ Esporta CSV', 'Position', [605 250 260 40], ...
        'FontSize', 14, 'ButtonPushedFcn', @(~,~) disp('TODO: esporta CSV'));
    uibutton(tabSession, 'Text', 'üßπ Pulisci cronologia', 'Position', [900 250 260 40], ...
        'FontSize', 14, 'ButtonPushedFcn', @(~,~) disp('TODO: pulisci'));

    % Log dettagliato
    uitextarea(tabSession, 'Position', [20 20 1140 190], 'Editable', 'off', 'Tag', 'FullLogBox', ...
        'Value', {'Log dettagliato delle classificazioni e operazioni eseguite.'});

    %% === TAB 5 ‚Äì Guida (FAQ) ===
    tabHelp = uitab(tg, 'Title', '‚ùì Guida');

    % === Titolo interno al pannello scrollabile ===
    uilabel(tabHelp, ...
        'Text', 'Domande frequenti (FAQ)', ...
        'Position', [20 510 800 30], ...
        'FontSize', 18, ...
        'FontWeight', 'bold', ...
        'FontName', 'Segoe UI');    
    
    % ScrollPanel visibile
    scrollPanel = uipanel(tabHelp, ...
        'Position', [20 20 1140 480], ...
        'Scrollable', 'on', ...
        'BackgroundColor', [1 1 1], ...
        'Tag', 'FAQScrollPanel');
    
    % === Pannello interno scrollabile (contiene tutto: titolo, domande e risposte) ===
    internalHeight = 1850;
    internalPanel = uipanel(scrollPanel, ...
        'Position', [0 0 1080 internalHeight], ...
        'BackgroundColor', [1 1 1], ...
        'BorderType', 'none');    
    
    % === Domande & Risposte ===
    domande = {
        'Come carico un‚Äôimmagine da classificare?', ...
        'Come funziona la classificazione?', ...
        'Posso classificare pi√π immagini insieme?', ...
        'A cosa serve la tab ‚ÄúVettori di feature‚Äù?', ...
        'Cosa viene salvato in una sessione?', ...
        'Come salvo una sessione?', ...
        'Come carico una sessione salvata?', ...
        'A cosa serve il CSV?', ...
        'Posso modificare i tag o i nomi dei file?', ...
        'Il classificatore pu√≤ sbagliare?', ...
        'Posso usare file .mat personalizzati?', ...
        'A cosa serve il log dettagliato?', ...
        'Posso eliminare i dati e ricominciare da zero?', ...
        'Perch√© un‚Äôimmagine non viene classificata?'
    };
    
    risposte = {
        "Per caricare un'immagine da classificare, vai alla tab 'Classifica immagine' e premi il pulsante 'üìÇ Carica immagine'. Si aprir√† una finestra in cui potrai selezionare file .jpg, .png o simili. L'immagine verr√† visualizzata in anteprima e sar√† pronta per la classificazione.",...
        "Il classificatore estrae caratteristiche geometriche (feature) dall'immagine, come forma e compattezza. Queste vengono analizzate secondo delle regole interne, e il sistema assegna la classe pi√π probabile (es. mano aperta, pugno, ecc.).",...
        "S√¨, puoi classificare pi√π immagini contemporaneamente. Caricale con 'üìÇ Carica immagine', poi premi 'üìÅ Classifica tutto'. Tutte le immagini verranno analizzate e i risultati salvati in un file CSV.",...
        "La tab 'Vettori di feature' ti permette di inserire direttamente i dati (feature) invece di caricare un'immagine. √à utile se hai gi√† calcolato le feature o hai un file .mat con i dati.",...
        "Vengono salvati tutti i dati della sessione attuale: immagini caricate, classificazioni, risultati CSV, log delle operazioni e vettori di feature. Quando riapri la sessione, tutto verr√† ripristinato.",...
        "Per salvare una sessione vai alla tab 'Sessione' e clicca su 'üíæ Salva sessione'. Scegli un nome file e una cartella. Tutti i dati verranno archiviati in un file .mat.",...
        "Vai alla tab 'Sessione' e clicca su 'üìÅ Carica sessione'. Seleziona il file .mat salvato in precedenza. Tutti i dati verranno caricati automaticamente.",...
        "Il CSV (Comma Separated Values) √® un file di testo che contiene una tabella. Ogni riga rappresenta un'immagine classificata, con il suo nome, le feature estratte e il risultato.",...
        "No, non dall'interno dell'app. Se vuoi modificare il nome o i tag dei file, fallo nel sistema operativo (Esplora file) e poi ricarica le immagini.",...
        "S√¨, il classificatore pu√≤ sbagliare, specialmente con immagini sfocate, gesti incompleti o condizioni di luce difficili. Usa immagini chiare con sfondi semplici per ottenere risultati migliori.",...
        "S√¨, se il file .mat contiene un vettore di feature nel formato corretto. Questo √® utile per testare dati generati da altri strumenti o manualmente.",...
        "Il log mostra tutte le operazioni eseguite nella sessione, come caricamenti, classificazioni, salvataggi ed errori. Serve a capire cosa √® successo e a ricostruire il flusso di lavoro.",...
        "S√¨. Nella tab 'Sessione' clicca su 'üßπ Pulisci cronologia'. Tutti i file caricati, le classificazioni e il log verranno cancellati. Potrai iniziare una nuova sessione da zero.",...
        "Ci sono diverse cause: il file potrebbe non essere un'immagine valida, avere un formato non supportato (.tiff, .bmp, ecc.), oppure essere troppo danneggiato o vuoto. Controlla che l'immagine sia nitida e ben ritagliata."
    };
    
    % Layout dinamico
    startY = internalHeight - 40;
    gap = 10;
    faqComponents = gobjects(length(domande), 2);
    
    for i = 1:length(domande)
        % Calcolo altezza dinamica della risposta
        txt = risposte{i};
        nLines = count(txt, newline) + ceil(strlength(txt)/85);  % stima
        respH = max(60, nLines * 18);
        
        buttonHeight = 30;  % nuovo valore variabile, puoi metterlo sopra

        y = startY - sum(cellfun(@(r) ...
            max(5, count(r, newline) + ceil(strlength(r)/85)) * 18 + gap + buttonHeight, ...
            risposte(1:i-1)));
    
        % Bottone domanda
        btn = uibutton(internalPanel, ...
            'Text', ['‚ûï ' domande{i}], ...
            'FontSize', 14, ...
            'FontName', 'Segoe UI', ...
            'Position', [10 y 1060 30], ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', [1 1 1]);
    
        % Risposta nascosta
        answer = uitextarea(internalPanel, ...
            'Value', splitlines(txt), ...
            'Editable', 'off', ...
            'Visible', 'off', ...
            'FontSize', 13, ...
            'FontName', 'Segoe UI', ...
            'Position', [20 y - respH - 5 1040 respH]);
    
        btn.ButtonPushedFcn = @(src, ~) toggleFAQEntry(src, answer, scrollPanel);
        faqComponents(i,:) = [btn, answer];
    end
    
    drawnow;
    scroll(scrollPanel, 'top');

    %% === Cornice estetica del footer ===
    footerFrame = uipanel(fig, ...
        'Position', [10 10 1180 50], ...
        'BackgroundColor', [0.94 0.94 0.94], ...
        'BorderType', 'line', ...
        'BorderWidth', 1);

    % === Footer ===
    addFooter(footerFrame);

    %% ===== Patch di wiring: TAB 2 =====
    % Allinea i tag usati dalla logica (no-op se gi√† coincidono)
    set(findobj(fig,'Tag','ResultLabelImg'),      'Tag','ResultLabel');
    set(findobj(fig,'Tag','FeatureTableImg'),     'Tag','FeatureTable');
    set(findobj(fig,'Tag','LogBoxImg'),           'Tag','LogBox');
    set(findobj(fig,'Tag','HistoryTablePartial'), 'Tag','HistoryTable');
    
    % Stato iniziale richiesto dalla logica
    if ~isappdata(fig,'ImageHistoryData'), setappdata(fig,'ImageHistoryData', {}); end
    if ~isappdata(fig,'CurrentImagePath'), setappdata(fig,'CurrentImagePath', ''); end
    
    % Aggancia i pulsanti della TAB 2 alle tue funzioni
    btnLoadImg      = findobj(fig, 'Text', 'üìÇ Carica immagine');
    btnClassifyOne  = findobj(fig, 'Text', '‚ñ∂ Classifica immagine');
    btnClassifyAll  = findobj(fig, 'Text', 'üìÅ Classifica tutto');
    
    btnLoadImg.ButtonPushedFcn     = @(~,~) loadMultipleImages(fig);
    btnClassifyOne.ButtonPushedFcn = @(~,~) classifyAndLabel(fig);
    btnClassifyAll.ButtonPushedFcn = @(~,~) classifyAllImages(fig);
    
    % Selezione riga cronologia ‚Üí ricarica anteprima
    tblHist = findobj(fig, 'Tag', 'HistoryTable');
    if ~isempty(tblHist) && isprop(tblHist,'CellSelectionCallback')
        tblHist.CellSelectionCallback = @(tbl,event) onHistorySelect(fig, event);
    end

    %% ===== Wiring TAB 3 =====
    btnVec1 = findobj(fig,'Text','‚úç Inserisci manuale');
    btnVec2 = findobj(fig,'Text','üìÅ Carica .mat');
    btnVec3 = findobj(fig,'Text','üìÅ Classifica vettori');
    
    btnVec1.ButtonPushedFcn = @(~,~) loadFeatureVector(fig,'mode','manual','target','tab3');
    btnVec2.ButtonPushedFcn = @(~,~) loadFeatureVector(fig,'mode','mat','target','tab3');
    btnVec3.ButtonPushedFcn = @(~,~) loadFeatureVector(fig,'mode','existing','target','tab3');

    %% --- Wiring Tab4 ---
    btnLoadSess  = findobj(fig,'Text','üìÅ Carica sessione');
    btnSaveSess  = findobj(fig,'Text','üíæ Salva sessione');
    btnExportCSV = findobj(fig,'Text','üì§ Esporta CSV');
    btnClearHist = findobj(fig,'Text','üßπ Pulisci cronologia');
    
    btnLoadSess.ButtonPushedFcn  = @(~,~) loadSession(fig);
    btnSaveSess.ButtonPushedFcn  = @(~,~) saveSession(fig);
    btnExportCSV.ButtonPushedFcn = @(~,~) exportSessionCSV(fig);
    btnClearHist.ButtonPushedFcn = @(~,~) clearHistory(fig);

    % Abilita doppio click nella tabella cronologia completa
    enableHistoryTableDoubleClick(fig);

end